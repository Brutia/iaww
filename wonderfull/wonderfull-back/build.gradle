
//apply plugin: 'java'
//apply plugin: 'org.springframework.boot.gradle.plugin.SpringBootPlugin'
//apply plugin: 'io.spring.dependency-management'
//apply plugin: 'eclipse'
//apply plugin: 'org.springframework.boot.gradle.plugin.SpringBootPlugin'

//repositories {
//	jcenter()
//	mavenCentral()
//	maven: {
//		url "https://plugins.gradle.org/m2/"
//	}
//}

//apply plugin: 'java'
//apply plugin: 'io.spring.dependency-management'
//apply plugin: 'eclipse'
//apply plugin: 'org.springframework.boot.gradle.plugin.SpringBootPlugin'


apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
//apply plugin: 'eclipse'



[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

compileJava {
	options.compilerArgs = [
			'-Amapstruct.unmappedTargetPolicy=ERROR',
	]
}


//springBoot {
//	buildInfo()
//}
sourceCompatibility = 11
targetCompatibility = 11

//task copyNpmDist(type: Copy) {
//	from project(':wonderfull-front').fileTree("dist")
//	into file("${project.buildDir}/resources/main/dist")
//}

// def buildFront = tasks.getByPath(':wonderfull-front:build')

//bootJar.dependsOn copyNpmDist
// bootJar.dependsOn buildFront
// copyNpmDist.mustRunAfter buildFront

bootJar {
	baseName  = 'iaww'
}


dependencies {

			implementation 'org.springframework.boot:spring-boot-starter-websocket'
			implementation 'org.springframework.boot:spring-boot-starter-security'
			implementation 'org.springframework.boot:spring-boot-starter-jdbc'
			implementation 'org.springframework.boot:spring-boot-starter-actuator'
			implementation 'org.springframework.security:spring-security-oauth2-client'
		        implementation 'org.springframework.security:spring-security-oauth2-jose'
			implementation 'org.springframework.security:spring-security-messaging'
			implementation 'org.flywaydb:flyway-core'
			implementation 'com.h2database:h2'
			

			testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

test {
	useJUnitPlatform()
}
